// Nagumo equation with Homogeneus Dirichlet BCs on a circle

border c(t=0,2*pi){x=36*cos(t);y=36*sin(t);label=1;}; //Define the circle of radius 6 centered in the origin
int M = 301; //Number of discretization points in the time domain
real a = 0.25; //Define the threshold parameter
real T = 50; //Final time
real dt = T/(M-1); //Compute the time interval amplitude
macro grad (u)  [dx(u), dy(u)] //EOM Define the Macro for the gradient

int k = 60;

func f = exp(-(x)^2-(y)^2); //Fix the initial condition as a Gaussian
mesh Th=buildmesh(c(k));
plot(Th,wait=1); // plot of the mesh

fespace Vh(Th,P2); //Define the Galerkin space as the one of piecewise quadratic polynomials
Vh uh,uOld,vh,u0; //Define the needed functions
uOld = f; //Set the initial condition
u0 = f; //Store it as an element of the space Vh to compute the maximum at the end
plot(uOld,wait=1,value=true,fill=1, dim=3);

//Solve in time
for (int it=0;it<M-1;it++) {
  solve nagumo(uh,vh) =
    int2d(Th)(uh*vh + dt*grad(uh)'*grad(vh)/2)
    - int2d(Th)(uOld*vh - dt*(grad(uOld)'*grad(vh))/2)
    + int2d(Th)(dt*uOld*(1-uOld)*(uOld-a)*vh)
    //+ on(1,2,3,4, uh=0);
    + on(1,uh=0);
    uOld = uh; //Update the solution for the next iteration
}
plot(uOld,wait=1,value=true,fill=1, dim=3);
cout<<endl<<"The maximum value of the solution at time 0 is: "<<u0[].max<<endl; //Print the max of the initial cond
cout<<endl<<"The maximum value of the solution at time T=50 is: "<<uh[].max<<endl; //Print the current max of the sol.
